{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nVue.use(Vuex);\nexport default new Vuex.Store({\n  state: {\n    products: [],\n    product: null,\n    uniqueIds: [],\n    productCategoriesTitle: [],\n    cart: [],\n    quantity: 1\n  },\n  getters: {\n    getCategory: state => category => {\n      return state.products.filter(product => product.category === category);\n    },\n\n    specialProduct(state) {\n      return state.products.filter(product => product.special);\n    }\n\n  },\n  mutations: {\n    setProducts(state, products) {\n      state.products = products;\n    },\n\n    setProduct(state, product) {\n      state.product = product;\n    },\n\n    setCart(state, cart) {\n      state.cart.push(cart);\n      console.log(cart);\n    },\n\n    uniqueCategory: state => {\n      state.productCategoriesTitle = state.products.filter(element => {\n        const isDuplicate = state.uniqueIds.includes(element.category);\n\n        if (!isDuplicate) {\n          state.uniqueIds.push(element.category);\n          return true;\n        }\n\n        return false;\n      });\n    }\n  },\n  actions: {\n    async getProducts({\n      commit\n    }) {\n      const data = await fetch('http://localhost:3000/products');\n      let products = await data.json();\n      commit('setProducts', products);\n    },\n\n    async getProduct({\n      commit\n    }, id) {\n      const data = await fetch(`http://localhost:3000/products/${id}`);\n      let product = await data.json();\n      commit(\"setProduct\", product);\n    },\n\n    getCart({\n      commit\n    }, cart) {\n      commit('setCart', cart);\n    }\n\n  },\n  modules: {}\n});","map":{"version":3,"names":["Vue","Vuex","use","Store","state","products","product","uniqueIds","productCategoriesTitle","cart","quantity","getters","getCategory","category","filter","specialProduct","special","mutations","setProducts","setProduct","setCart","push","console","log","uniqueCategory","element","isDuplicate","includes","actions","getProducts","commit","data","fetch","json","getProduct","id","getCart","modules"],"sources":["E:/Projects/e-commerce/src/store/index.js"],"sourcesContent":["import Vue from 'vue';\r\nimport Vuex from 'vuex'\r\n\r\nVue.use(Vuex)\r\n\r\nexport default new Vuex.Store({\r\n    state: {\r\n        products: [],\r\n        product: null,\r\n        uniqueIds: [],\r\n        productCategoriesTitle: [],\r\n        cart: [],\r\n        quantity: 1,\r\n    },\r\n    getters: {\r\n        getCategory: (state) => (category) => {\r\n            return state.products.filter(product => product.category === category)\r\n        },\r\n        specialProduct(state) {\r\n            return state.products.filter(product => product.special )\r\n        },\r\n    },\r\n    mutations: {\r\n        setProducts(state, products) {\r\n            state.products = products;\r\n        },\r\n        setProduct(state, product) {\r\n            state.product = product;\r\n        },\r\n        setCart(state,cart){\r\n          state.cart.push(cart);\r\n          console.log(cart)\r\n        },\r\n        uniqueCategory: (state) => {\r\n            state.productCategoriesTitle = state.products.filter(element => {\r\n                const isDuplicate = state.uniqueIds.includes(element.category);\r\n                if (!isDuplicate) {\r\n                    state.uniqueIds.push(element.category);\r\n                    return true;\r\n                }\r\n                return false;\r\n            })\r\n        },\r\n    },\r\n    actions: {\r\n        async getProducts({commit}) {\r\n            const data = await fetch('http://localhost:3000/products');\r\n            let products = await data.json();\r\n            commit('setProducts', products);\r\n        },\r\n        async getProduct({commit}, id) {\r\n            const data = await fetch(`http://localhost:3000/products/${id}`);\r\n            let product = await data.json();\r\n            commit(\"setProduct\", product);\r\n        },\r\n        getCart({commit}, cart){\r\n            commit('setCart',cart);\r\n        }\r\n    },\r\n    modules: {}\r\n})\r\n"],"mappings":";AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEAD,GAAG,CAACE,GAAJ,CAAQD,IAAR;AAEA,eAAe,IAAIA,IAAI,CAACE,KAAT,CAAe;EAC1BC,KAAK,EAAE;IACHC,QAAQ,EAAE,EADP;IAEHC,OAAO,EAAE,IAFN;IAGHC,SAAS,EAAE,EAHR;IAIHC,sBAAsB,EAAE,EAJrB;IAKHC,IAAI,EAAE,EALH;IAMHC,QAAQ,EAAE;EANP,CADmB;EAS1BC,OAAO,EAAE;IACLC,WAAW,EAAGR,KAAD,IAAYS,QAAD,IAAc;MAClC,OAAOT,KAAK,CAACC,QAAN,CAAeS,MAAf,CAAsBR,OAAO,IAAIA,OAAO,CAACO,QAAR,KAAqBA,QAAtD,CAAP;IACH,CAHI;;IAILE,cAAc,CAACX,KAAD,EAAQ;MAClB,OAAOA,KAAK,CAACC,QAAN,CAAeS,MAAf,CAAsBR,OAAO,IAAIA,OAAO,CAACU,OAAzC,CAAP;IACH;;EANI,CATiB;EAiB1BC,SAAS,EAAE;IACPC,WAAW,CAACd,KAAD,EAAQC,QAAR,EAAkB;MACzBD,KAAK,CAACC,QAAN,GAAiBA,QAAjB;IACH,CAHM;;IAIPc,UAAU,CAACf,KAAD,EAAQE,OAAR,EAAiB;MACvBF,KAAK,CAACE,OAAN,GAAgBA,OAAhB;IACH,CANM;;IAOPc,OAAO,CAAChB,KAAD,EAAOK,IAAP,EAAY;MACjBL,KAAK,CAACK,IAAN,CAAWY,IAAX,CAAgBZ,IAAhB;MACAa,OAAO,CAACC,GAAR,CAAYd,IAAZ;IACD,CAVM;;IAWPe,cAAc,EAAGpB,KAAD,IAAW;MACvBA,KAAK,CAACI,sBAAN,GAA+BJ,KAAK,CAACC,QAAN,CAAeS,MAAf,CAAsBW,OAAO,IAAI;QAC5D,MAAMC,WAAW,GAAGtB,KAAK,CAACG,SAAN,CAAgBoB,QAAhB,CAAyBF,OAAO,CAACZ,QAAjC,CAApB;;QACA,IAAI,CAACa,WAAL,EAAkB;UACdtB,KAAK,CAACG,SAAN,CAAgBc,IAAhB,CAAqBI,OAAO,CAACZ,QAA7B;UACA,OAAO,IAAP;QACH;;QACD,OAAO,KAAP;MACH,CAP8B,CAA/B;IAQH;EApBM,CAjBe;EAuC1Be,OAAO,EAAE;IACL,MAAMC,WAAN,CAAkB;MAACC;IAAD,CAAlB,EAA4B;MACxB,MAAMC,IAAI,GAAG,MAAMC,KAAK,CAAC,gCAAD,CAAxB;MACA,IAAI3B,QAAQ,GAAG,MAAM0B,IAAI,CAACE,IAAL,EAArB;MACAH,MAAM,CAAC,aAAD,EAAgBzB,QAAhB,CAAN;IACH,CALI;;IAML,MAAM6B,UAAN,CAAiB;MAACJ;IAAD,CAAjB,EAA2BK,EAA3B,EAA+B;MAC3B,MAAMJ,IAAI,GAAG,MAAMC,KAAK,CAAE,kCAAiCG,EAAG,EAAtC,CAAxB;MACA,IAAI7B,OAAO,GAAG,MAAMyB,IAAI,CAACE,IAAL,EAApB;MACAH,MAAM,CAAC,YAAD,EAAexB,OAAf,CAAN;IACH,CAVI;;IAWL8B,OAAO,CAAC;MAACN;IAAD,CAAD,EAAWrB,IAAX,EAAgB;MACnBqB,MAAM,CAAC,SAAD,EAAWrB,IAAX,CAAN;IACH;;EAbI,CAvCiB;EAsD1B4B,OAAO,EAAE;AAtDiB,CAAf,CAAf"},"metadata":{},"sourceType":"module"}