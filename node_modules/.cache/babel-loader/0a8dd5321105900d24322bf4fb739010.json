{"ast":null,"code":"export default {\n  name: \"TestView\",\n\n  data() {\n    return {\n      products: [],\n      // لیست محصولات\n      loading: false // وضعیت بارگزاری\n\n    };\n  },\n\n  mounted() {\n    // برای اولین بار، محتوا را بارگزاری کنید\n    this.loadMore(); // افزودن یک رویداد اسکرول به صفحه\n\n    window.addEventListener('scroll', this.handleScroll);\n  },\n\n  methods: {\n    async loadMore() {\n      // نشانگر در حالت بارگزاری را فعال کنید\n      this.loading = true; // بارگزاری داده‌های جدید\n\n      const newProducts = await this.fetchData(); // افزودن داده‌های جدید به لیست محصولات\n\n      this.products = [...this.products, ...newProducts]; // غیر فعال کردن نشانگر بارگزاری\n\n      this.loading = false;\n    },\n\n    async fetchData() {\n      // مثال: دریافت داده‌های جدید از سرور\n      // شما می‌توانید از API یا سایر منابع دلخواه خود برای بارگزاری داده‌ها استفاده کنید\n      // در اینجا یک مثال ساده آورده شده است\n      await new Promise(resolve => setTimeout(resolve, 2000)); // مثال: تاخیر 2 ثانیه\n\n      const newProducts = [{\n        id: 4,\n        name: 'Product D'\n      }, {\n        id: 5,\n        name: 'Product E'\n      } // ...\n      ];\n      return newProducts;\n    },\n\n    handleScroll() {\n      // در صورتی که کاربر به آخر صفحه برسد، محتوای جدید را بارگزاری کنید\n      if (window.innerHeight + window.scrollY >= document.body.offsetHeight - 100 && !this.loading) {\n        this.loadMore();\n      }\n    }\n\n  },\n\n  beforeDestroy() {\n    // حذف رویداد اسکرول در زمان عدم نیاز به آن\n    window.removeEventListener('scroll', this.handleScroll);\n  }\n\n};","map":{"version":3,"mappings":"AAgBA;EACAA,gBADA;;EAEAC;IACA;MACAC,YADA;MACA;MACAC,cAFA,CAEA;;IAFA;EAIA,CAPA;;EAQAC;IACA;IACA,gBAFA,CAGA;;IACAC;EACA,CAbA;;EAcAC;IACA;MACA;MACA,oBAFA,CAGA;;MACA,2CAJA,CAKA;;MACA,mDANA,CAOA;;MACA;IACA,CAVA;;IAWA;MACA;MACA;MACA;MACA,wDAJA,CAIA;;MACA,qBACA;QAAAC;QAAAP;MAAA,CADA,EAEA;QAAAO;QAAAP;MAAA,CAFA,CAGA;MAHA;MAKA;IACA,CAtBA;;IAuBAQ;MACA;MACA,IACAH,2EACA,aAFA,EAGA;QACA;MACA;IACA;;EA/BA,CAdA;;EA+CAI;IACA;IACAJ;EACA;;AAlDA","names":["name","data","products","loading","mounted","window","methods","id","handleScroll","beforeDestroy"],"sourceRoot":"src/views","sources":["TestView.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <!-- نمایش لیست محصولات -->\r\n    <div v-for=\"product in products\" :key=\"product.id\">\r\n      {{ product.name }}\r\n    </div>\r\n\r\n    <!-- نمایش دکمه بارگزاری بیشتر در صورت نیاز -->\r\n    <button v-if=\"!loading\" @click=\"loadMore\">View More</button>\r\n\r\n    <!-- نمایش پیام در حال بارگزاری در صورت لودینگ بودن -->\r\n    <p v-if=\"loading\">Loading...</p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name:\"TestView\",\r\n  data() {\r\n    return {\r\n      products: [], // لیست محصولات\r\n      loading: false, // وضعیت بارگزاری\r\n    };\r\n  },\r\n  mounted() {\r\n    // برای اولین بار، محتوا را بارگزاری کنید\r\n    this.loadMore();\r\n    // افزودن یک رویداد اسکرول به صفحه\r\n    window.addEventListener('scroll', this.handleScroll);\r\n  },\r\n  methods: {\r\n    async loadMore() {\r\n      // نشانگر در حالت بارگزاری را فعال کنید\r\n      this.loading = true;\r\n      // بارگزاری داده‌های جدید\r\n      const newProducts = await this.fetchData();\r\n      // افزودن داده‌های جدید به لیست محصولات\r\n      this.products = [...this.products, ...newProducts];\r\n      // غیر فعال کردن نشانگر بارگزاری\r\n      this.loading = false;\r\n    },\r\n    async fetchData() {\r\n      // مثال: دریافت داده‌های جدید از سرور\r\n      // شما می‌توانید از API یا سایر منابع دلخواه خود برای بارگزاری داده‌ها استفاده کنید\r\n      // در اینجا یک مثال ساده آورده شده است\r\n      await new Promise(resolve => setTimeout(resolve, 2000)); // مثال: تاخیر 2 ثانیه\r\n      const newProducts = [\r\n        { id: 4, name: 'Product D' },\r\n        { id: 5, name: 'Product E' },\r\n        // ...\r\n      ];\r\n      return newProducts;\r\n    },\r\n    handleScroll() {\r\n      // در صورتی که کاربر به آخر صفحه برسد، محتوای جدید را بارگزاری کنید\r\n      if (\r\n          window.innerHeight + window.scrollY >= document.body.offsetHeight - 100 &&\r\n          !this.loading\r\n      ) {\r\n        this.loadMore();\r\n      }\r\n    },\r\n  },\r\n  beforeDestroy() {\r\n    // حذف رویداد اسکرول در زمان عدم نیاز به آن\r\n    window.removeEventListener('scroll', this.handleScroll);\r\n  },\r\n};\r\n</script>"]},"metadata":{},"sourceType":"module"}