{"ast":null,"code":"export default {\n  data() {\n    return {\n      products: [],\n      // تمام محصولات\n      displayedProducts: [],\n      // محصولاتی که در حال حاضر نمایش داده می‌شوند\n      loading: false,\n      // وضعیت بارگزاری\n      itemsPerPage: 20 // تعداد محصولات در هر صفحه\n\n    };\n  },\n\n  mounted() {\n    // برای اولین بار، محتوا را بارگزاری کنید\n    this.loadMore();\n  },\n\n  methods: {\n    loadMore() {\n      // نشانگر در حالت بارگزاری را فعال کنید\n      this.loading = true; // شماره صفحه جدید\n\n      const page = Math.ceil(this.displayedProducts.length / this.itemsPerPage) + 1; // محصولات جدید بر اساس شماره صفحه بارگزاری کنید\n\n      const newProducts = this.products.slice((page - 1) * this.itemsPerPage, page * this.itemsPerPage); // افزودن محصولات جدید به محصولات نمایش داده شده\n\n      this.displayedProducts = [...this.displayedProducts, ...newProducts]; // غیرفعال کردن نشانگر بارگزاری\n\n      this.loading = false;\n    },\n\n    // مثال: برای شبیه‌سازی دریافت داده از سرور\n    async fetchData() {\n      await new Promise(resolve => setTimeout(resolve, 2000)); // مثال: تاخیر 2 ثانیه\n\n      return [{\n        id: 1,\n        name: 'Product A'\n      }, {\n        id: 2,\n        name: 'Product B'\n      } // ...\n      ];\n    }\n\n  }\n};","map":{"version":3,"mappings":"AAkBA;EACAA;IACA;MACAC,YADA;MACA;MACAC,qBAFA;MAEA;MACAC,cAHA;MAGA;MACAC,gBAJA,CAIA;;IAJA;EAMA,CARA;;EASAC;IACA;IACA;EACA,CAZA;;EAaAC;IACAC;MACA;MACA,oBAFA,CAIA;;MACA,8EALA,CAOA;;MACA,wCACA,8BADA,EAEAC,wBAFA,EARA,CAaA;;MACA,qEAdA,CAgBA;;MACA;IACA,CAnBA;;IAoBA;IACA;MACA,wDADA,CACA;;MACA,QACA;QAAAC;QAAAC;MAAA,CADA,EAEA;QAAAD;QAAAC;MAAA,CAFA,CAGA;MAHA;IAKA;;EA5BA;AAbA","names":["data","products","displayedProducts","loading","itemsPerPage","mounted","methods","loadMore","page","id","name"],"sourceRoot":"src/views","sources":["TestView.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <!-- نمایش تعداد محدودی از محصولات -->\r\n    <div v-for=\"(product, index) in displayedProducts\" :key=\"index\">\r\n      {{ product.name }}\r\n    </div>\r\n\r\n    <!-- نمایش دکمه بارگزاری بیشتر در صورت نیاز -->\r\n    <button v-if=\"!loading && displayedProducts.length < products.length\" @click=\"loadMore\">\r\n      View More\r\n    </button>\r\n\r\n    <!-- نمایش پیام در حال بارگزاری در صورت لودینگ بودن -->\r\n    <p v-if=\"loading\">Loading...</p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      products: [],           // تمام محصولات\r\n      displayedProducts: [],  // محصولاتی که در حال حاضر نمایش داده می‌شوند\r\n      loading: false,         // وضعیت بارگزاری\r\n      itemsPerPage: 20,       // تعداد محصولات در هر صفحه\r\n    };\r\n  },\r\n  mounted() {\r\n    // برای اولین بار، محتوا را بارگزاری کنید\r\n    this.loadMore();\r\n  },\r\n  methods: {\r\n    loadMore() {\r\n      // نشانگر در حالت بارگزاری را فعال کنید\r\n      this.loading = true;\r\n\r\n      // شماره صفحه جدید\r\n      const page = Math.ceil(this.displayedProducts.length / this.itemsPerPage) + 1;\r\n\r\n      // محصولات جدید بر اساس شماره صفحه بارگزاری کنید\r\n      const newProducts = this.products.slice(\r\n          (page - 1) * this.itemsPerPage,\r\n          page * this.itemsPerPage\r\n      );\r\n\r\n      // افزودن محصولات جدید به محصولات نمایش داده شده\r\n      this.displayedProducts = [...this.displayedProducts, ...newProducts];\r\n\r\n      // غیرفعال کردن نشانگر بارگزاری\r\n      this.loading = false;\r\n    },\r\n    // مثال: برای شبیه‌سازی دریافت داده از سرور\r\n    async fetchData() {\r\n      await new Promise(resolve => setTimeout(resolve, 2000)); // مثال: تاخیر 2 ثانیه\r\n      return [\r\n        { id: 1, name: 'Product A' },\r\n        { id: 2, name: 'Product B' },\r\n        // ...\r\n      ];\r\n    },\r\n  },\r\n};\r\n</script>\r\n"]},"metadata":{},"sourceType":"module"}